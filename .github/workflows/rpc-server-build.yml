name: Build Rust Binaries for the gRPC server

on:
  push:
    branches: [ "main" ]

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ "x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu" ]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            build-essential \
            cmake \
            g++ \
            libstdc++-11-dev \
            protobuf-compiler

      - name: Install dependencies for cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - name: Compile ONNX Runtime (only for aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          git clone https://github.com/microsoft/onnxruntime --recursive \
              --branch 'v1.20.1' --single-branch --depth 1
          cd onnxruntime
          # Pass --arm64 and an out-of-tree build dir to avoid conflicts
          ./build.sh --update --build --config Release --parallel \
                     --compile_no_warning_as_error --skip_submodule_sync \
                     --arm64 \
                     --build_dir build-aarch64
          cd ..

      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Build release binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export ORT_LIB_LOCATION="$(pwd)/onnxruntime/build-aarch64/Linux/Release"
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-binary
          path: target/${{ matrix.target }}/release/rpc
